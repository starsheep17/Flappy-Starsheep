<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Flappy Starsheep</title>
  <style>
    body {
      margin: 0;
      background: linear-gradient(#00111f, #003366);
      overflow: hidden;
      font-family: Arial, sans-serif;
      color: white;
      text-align: center;
    }
    canvas {
      background: #001933;
      display: block;
      margin: 20px auto;
      border-radius: 10px;
      box-shadow: 0 0 20px #00ccff;
    }
  </style>
</head>
<body>
  <h1>Flappy Starsheep</h1>
  <canvas id="gameCanvas" width="400" height="600"></canvas>
  <p>Tap / Click to flap! Help the sheep fly through the stars ‚≠ê</p>

  <script>
    const canvas = document.getElementById('gameCanvas');
    const ctx = canvas.getContext('2d');

    // Game variables
    const gravity = 0.5;
    const flapStrength = -8;
    let frames = 0;
    let gameOver = false;

    // Sheep sprite (simple circle with winking eyes)
    class Sheep {
      constructor() {
        this.x = 80;
        this.y = canvas.height / 2;
        this.radius = 25;
        this.velocity = 0;
        this.winkFrame = 0;
      }

      update() {
        this.velocity += gravity;
        this.y += this.velocity;

        // Wink every 100 frames for 10 frames
        this.winkFrame = (frames % 110);
      }

      flap() {
        this.velocity = flapStrength;
      }

      draw() {
        ctx.save();

        // Body
        ctx.fillStyle = '#fff';
        ctx.beginPath();
        ctx.ellipse(this.x, this.y, this.radius + 10, this.radius + 7, 0, 0, Math.PI * 2);
        ctx.fill();

        // Head
        ctx.fillStyle = '#f9f9f9';
        ctx.beginPath();
        ctx.arc(this.x + 25, this.y - 10, this.radius, 0, Math.PI * 2);
        ctx.fill();

        // Eyes
        ctx.fillStyle = '#000';
        if (this.winkFrame > 0 && this.winkFrame < 10) {
          // Left eye open, right eye winking
          // Left eye open
          ctx.beginPath();
          ctx.arc(this.x + 15, this.y - 15, 5, 0, Math.PI * 2);
          ctx.fill();
          // Right eye wink (line)
          ctx.lineWidth = 3;
          ctx.beginPath();
          ctx.moveTo(this.x + 35, this.y - 15);
          ctx.lineTo(this.x + 45, this.y - 15);
          ctx.stroke();
        } else {
          // Both eyes open
          ctx.beginPath();
          ctx.arc(this.x + 15, this.y - 15, 5, 0, Math.PI * 2);
          ctx.fill();
          ctx.beginPath();
          ctx.arc(this.x + 40, this.y - 15, 5, 0, Math.PI * 2);
          ctx.fill();
        }

        // Smile
        ctx.strokeStyle = '#000';
        ctx.lineWidth = 2;
        ctx.beginPath();
        ctx.arc(this.x + 30, this.y - 5, 10, 0, Math.PI);
        ctx.stroke();

        ctx.restore();
      }
    }

    // Star obstacle class
    class Star {
      constructor(x, y) {
        this.x = x;
        this.y = y;
        this.radius = 15;
        this.passed = false;
      }

      update() {
        this.x -= 3; // move left

        // Reset star when off screen
        if (this.x + this.radius < 0) {
          this.x = canvas.width + Math.random() * 200;
          this.y = 50 + Math.random() * (canvas.height - 100);
          this.passed = false;
        }
      }

      draw() {
        ctx.save();
        ctx.fillStyle = '#ffff66';
        ctx.beginPath();
        // Simple star shape
        for (let i = 0; i < 5; i++) {
          ctx.lineTo(
            this.x + this.radius * Math.cos((18 + i * 72) * Math.PI / 180),
            this.y - this.radius * Math.sin((18 + i * 72) * Math.PI / 180)
          );
          ctx.lineTo(
            this.x + (this.radius / 2) * Math.cos((54 + i * 72) * Math.PI / 180),
            this.y - (this.radius / 2) * Math.sin((54 + i * 72) * Math.PI / 180)
          );
        }
        ctx.closePath();
        ctx.fill();
        ctx.restore();
      }
    }

    // Create game objects
    const sheep = new Sheep();
    const stars = [];
    for (let i = 0; i < 5; i++) {
      stars.push(new Star(canvas.width + i * 160, 100 + Math.random() * 400));
    }

    // Listen for flap
    window.addEventListener('mousedown', () => {
      if (!gameOver) sheep.flap();
      else resetGame();
    });
    window.addEventListener('touchstart', (e) => {
      e.preventDefault();
      if (!gameOver) sheep.flap();
      else resetGame();
    }, { passive: false });

    // Reset game
    function resetGame() {
      sheep.y = canvas.height / 2;
      sheep.velocity = 0;
      stars.forEach((star, i) => {
        star.x = canvas.width + i * 160;
        star.y = 100 + Math.random() * 400;
        star.passed = false;
      });
      frames = 0;
      gameOver = false;
      loop();
    }

    // Collision detection
    function checkCollision() {
      if (sheep.y + sheep.radius > canvas.height || sheep.y - sheep.radius < 0) {
        gameOver = true;
      }

      stars.forEach(star => {
        const dx = star.x - sheep.x;
        const dy = star.y - sheep.y;
        const distance = Math.sqrt(dx * dx + dy * dy);
        if (distance < star.radius + sheep.radius) {
          gameOver = true;
        }
      });
    }

    // Game loop
    function loop() {
      frames++;
      ctx.clearRect(0, 0, canvas.width, canvas.height);

      // Update & draw sheep
      sheep.update();
      sheep.draw();

      // Update & draw stars
      stars.forEach(star => {
        star.update();
        star.draw();
      });

      checkCollision();

      if (!gameOver) {
        requestAnimationFrame(loop);
      } else {
        ctx.fillStyle = 'white';
        ctx.font = '40px Arial';
        ctx.fillText('Game Over! Tap to Restart', 20, canvas.height / 2);
      }
    }

    loop();
  </script>
</body>
</html>